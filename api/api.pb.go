// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

package api

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Game Requests
type GameRequest struct {
	Id                   int32    `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	RetryLimit           int32    `protobuf:"varint,2,opt,name=RetryLimit,proto3" json:"RetryLimit,omitempty"`
	PlayerId             string   `protobuf:"bytes,3,opt,name=PlayerId,proto3" json:"PlayerId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameRequest) Reset()         { *m = GameRequest{} }
func (m *GameRequest) String() string { return proto.CompactTextString(m) }
func (*GameRequest) ProtoMessage()    {}
func (*GameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

func (m *GameRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameRequest.Unmarshal(m, b)
}
func (m *GameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameRequest.Marshal(b, m, deterministic)
}
func (m *GameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameRequest.Merge(m, src)
}
func (m *GameRequest) XXX_Size() int {
	return xxx_messageInfo_GameRequest.Size(m)
}
func (m *GameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GameRequest proto.InternalMessageInfo

func (m *GameRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GameRequest) GetRetryLimit() int32 {
	if m != nil {
		return m.RetryLimit
	}
	return 0
}

func (m *GameRequest) GetPlayerId() string {
	if m != nil {
		return m.PlayerId
	}
	return ""
}

// You can have more games going on
type GameArray struct {
	Game                 []*Game  `protobuf:"bytes,1,rep,name=Game,proto3" json:"Game,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameArray) Reset()         { *m = GameArray{} }
func (m *GameArray) String() string { return proto.CompactTextString(m) }
func (*GameArray) ProtoMessage()    {}
func (*GameArray) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}

func (m *GameArray) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameArray.Unmarshal(m, b)
}
func (m *GameArray) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameArray.Marshal(b, m, deterministic)
}
func (m *GameArray) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameArray.Merge(m, src)
}
func (m *GameArray) XXX_Size() int {
	return xxx_messageInfo_GameArray.Size(m)
}
func (m *GameArray) XXX_DiscardUnknown() {
	xxx_messageInfo_GameArray.DiscardUnknown(m)
}

var xxx_messageInfo_GameArray proto.InternalMessageInfo

func (m *GameArray) GetGame() []*Game {
	if m != nil {
		return m.Game
	}
	return nil
}

// Games variables
type Game struct {
	Id                   int32           `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	RetryLimit           int32           `protobuf:"varint,2,opt,name=RetryLimit,proto3" json:"RetryLimit,omitempty"`
	RetryLeft            int32           `protobuf:"varint,3,opt,name=RetryLeft,proto3" json:"RetryLeft,omitempty"`
	Word                 string          `protobuf:"bytes,4,opt,name=Word,proto3" json:"Word,omitempty"`
	WordMasked           string          `protobuf:"bytes,5,opt,name=WordMasked,proto3" json:"WordMasked,omitempty"`
	IncorrectGuesses     []*GuessRequest `protobuf:"bytes,6,rep,name=IncorrectGuesses,proto3" json:"IncorrectGuesses,omitempty"`
	Status               string          `protobuf:"bytes,7,opt,name=Status,proto3" json:"Status,omitempty"`
	PlayerId             string          `protobuf:"bytes,8,opt,name=PlayerId,proto3" json:"PlayerId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Game) Reset()         { *m = Game{} }
func (m *Game) String() string { return proto.CompactTextString(m) }
func (*Game) ProtoMessage()    {}
func (*Game) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}

func (m *Game) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Game.Unmarshal(m, b)
}
func (m *Game) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Game.Marshal(b, m, deterministic)
}
func (m *Game) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Game.Merge(m, src)
}
func (m *Game) XXX_Size() int {
	return xxx_messageInfo_Game.Size(m)
}
func (m *Game) XXX_DiscardUnknown() {
	xxx_messageInfo_Game.DiscardUnknown(m)
}

var xxx_messageInfo_Game proto.InternalMessageInfo

func (m *Game) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Game) GetRetryLimit() int32 {
	if m != nil {
		return m.RetryLimit
	}
	return 0
}

func (m *Game) GetRetryLeft() int32 {
	if m != nil {
		return m.RetryLeft
	}
	return 0
}

func (m *Game) GetWord() string {
	if m != nil {
		return m.Word
	}
	return ""
}

func (m *Game) GetWordMasked() string {
	if m != nil {
		return m.WordMasked
	}
	return ""
}

func (m *Game) GetIncorrectGuesses() []*GuessRequest {
	if m != nil {
		return m.IncorrectGuesses
	}
	return nil
}

func (m *Game) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Game) GetPlayerId() string {
	if m != nil {
		return m.PlayerId
	}
	return ""
}

// Requesting a guess
type GuessRequest struct {
	GameID               int32    `protobuf:"varint,1,opt,name=GameID,proto3" json:"GameID,omitempty"`
	Letter               string   `protobuf:"bytes,2,opt,name=Letter,proto3" json:"Letter,omitempty"`
	PlayerId             string   `protobuf:"bytes,3,opt,name=PlayerId,proto3" json:"PlayerId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GuessRequest) Reset()         { *m = GuessRequest{} }
func (m *GuessRequest) String() string { return proto.CompactTextString(m) }
func (*GuessRequest) ProtoMessage()    {}
func (*GuessRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}

func (m *GuessRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GuessRequest.Unmarshal(m, b)
}
func (m *GuessRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GuessRequest.Marshal(b, m, deterministic)
}
func (m *GuessRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuessRequest.Merge(m, src)
}
func (m *GuessRequest) XXX_Size() int {
	return xxx_messageInfo_GuessRequest.Size(m)
}
func (m *GuessRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GuessRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GuessRequest proto.InternalMessageInfo

func (m *GuessRequest) GetGameID() int32 {
	if m != nil {
		return m.GameID
	}
	return 0
}

func (m *GuessRequest) GetLetter() string {
	if m != nil {
		return m.Letter
	}
	return ""
}

func (m *GuessRequest) GetPlayerId() string {
	if m != nil {
		return m.PlayerId
	}
	return ""
}

func init() {
	proto.RegisterType((*GameRequest)(nil), "api.GameRequest")
	proto.RegisterType((*GameArray)(nil), "api.GameArray")
	proto.RegisterType((*Game)(nil), "api.Game")
	proto.RegisterType((*GuessRequest)(nil), "api.GuessRequest")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 354 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0x4d, 0x4b, 0xf3, 0x40,
	0x18, 0x6c, 0xfa, 0xbd, 0x4f, 0x5f, 0x4a, 0xdf, 0x3d, 0xc8, 0x52, 0x54, 0x4a, 0x4e, 0x51, 0xb1,
	0x42, 0x3d, 0x7b, 0x10, 0x84, 0x1a, 0xa8, 0x22, 0xdb, 0x83, 0xe8, 0x6d, 0x6d, 0x1e, 0x25, 0x68,
	0x9a, 0xba, 0xbb, 0x51, 0xfa, 0x9b, 0xfd, 0x09, 0x5e, 0x64, 0x9f, 0x84, 0x7e, 0x58, 0x91, 0x7a,
	0x4a, 0x66, 0x76, 0x98, 0x9d, 0xcc, 0x04, 0x98, 0x9a, 0xc5, 0xfd, 0x99, 0x4e, 0x6d, 0xca, 0x2b,
	0x6a, 0x16, 0xfb, 0x77, 0xd0, 0x1a, 0xaa, 0x04, 0x25, 0xbe, 0x66, 0x68, 0x2c, 0x6f, 0x43, 0x39,
	0x8c, 0x84, 0xd7, 0xf3, 0x82, 0x9a, 0x2c, 0x87, 0x11, 0xdf, 0x07, 0x90, 0x68, 0xf5, 0x7c, 0x14,
	0x27, 0xb1, 0x15, 0x65, 0xe2, 0x57, 0x18, 0xde, 0x85, 0xe6, 0xcd, 0x8b, 0x9a, 0xa3, 0x0e, 0x23,
	0x51, 0xe9, 0x79, 0x01, 0x93, 0x0b, 0xec, 0x1f, 0x02, 0x73, 0xd6, 0xe7, 0x5a, 0xab, 0x39, 0xdf,
	0x83, 0xaa, 0x03, 0xc2, 0xeb, 0x55, 0x82, 0xd6, 0x80, 0xf5, 0x5d, 0x0c, 0xba, 0x98, 0x68, 0xff,
	0xd3, 0xcb, 0xcf, 0xff, 0x1c, 0x60, 0x17, 0x58, 0x8e, 0xf0, 0xd1, 0x52, 0x82, 0x9a, 0x5c, 0x12,
	0x9c, 0x43, 0xf5, 0x36, 0xd5, 0x91, 0xa8, 0x52, 0x34, 0x7a, 0x77, 0x8e, 0xee, 0x79, 0xa5, 0xcc,
	0x33, 0x46, 0xa2, 0x46, 0x27, 0x2b, 0x0c, 0x3f, 0x83, 0x4e, 0x38, 0x9d, 0xa4, 0x5a, 0xe3, 0xc4,
	0x0e, 0x33, 0x34, 0x06, 0x8d, 0xa8, 0x53, 0xea, 0xff, 0x79, 0x6a, 0xc7, 0x15, 0x7d, 0xc9, 0x0d,
	0x29, 0xdf, 0x81, 0xfa, 0xd8, 0x2a, 0x9b, 0x19, 0xd1, 0x20, 0xeb, 0x02, 0xad, 0x35, 0xd5, 0xfc,
	0xd6, 0xd4, 0x3d, 0xfc, 0x5b, 0x75, 0x75, 0x1e, 0xae, 0x8c, 0xf0, 0xa2, 0x28, 0xa2, 0x40, 0x8e,
	0x1f, 0xa1, 0xb5, 0xa8, 0xa9, 0x08, 0x26, 0x0b, 0xf4, 0xdb, 0x0a, 0x83, 0x0f, 0x0f, 0x1a, 0x97,
	0x6a, 0xfa, 0x94, 0xa8, 0x29, 0x0f, 0xa0, 0x71, 0x8d, 0xef, 0xd4, 0x73, 0x67, 0xb9, 0x40, 0x7e,
	0x69, 0x77, 0xb9, 0x89, 0x5f, 0xe2, 0x27, 0xc0, 0x46, 0xb1, 0xb1, 0x0e, 0x99, 0x1f, 0xb4, 0xed,
	0x05, 0x43, 0xeb, 0xfa, 0x25, 0x7e, 0xe4, 0x76, 0x32, 0x59, 0x82, 0xdb, 0xb8, 0x1f, 0x40, 0x73,
	0xac, 0xde, 0xb6, 0x92, 0x1e, 0x43, 0x8b, 0xaa, 0x29, 0xbe, 0x74, 0x73, 0x82, 0x35, 0xf9, 0x43,
	0x9d, 0x7e, 0xed, 0xd3, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x88, 0xfa, 0x10, 0x97, 0xe7, 0x02,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HangmanClient is the client API for Hangman service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HangmanClient interface {
	NewGame(ctx context.Context, in *GameRequest, opts ...grpc.CallOption) (*Game, error)
	ListGames(ctx context.Context, in *GameRequest, opts ...grpc.CallOption) (*GameArray, error)
	ResumeGame(ctx context.Context, in *GameRequest, opts ...grpc.CallOption) (*Game, error)
	SaveGame(ctx context.Context, in *GameRequest, opts ...grpc.CallOption) (*Game, error)
	GuessLetter(ctx context.Context, in *GuessRequest, opts ...grpc.CallOption) (*Game, error)
}

type hangmanClient struct {
	cc *grpc.ClientConn
}

func NewHangmanClient(cc *grpc.ClientConn) HangmanClient {
	return &hangmanClient{cc}
}

func (c *hangmanClient) NewGame(ctx context.Context, in *GameRequest, opts ...grpc.CallOption) (*Game, error) {
	out := new(Game)
	err := c.cc.Invoke(ctx, "/api.Hangman/NewGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hangmanClient) ListGames(ctx context.Context, in *GameRequest, opts ...grpc.CallOption) (*GameArray, error) {
	out := new(GameArray)
	err := c.cc.Invoke(ctx, "/api.Hangman/ListGames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hangmanClient) ResumeGame(ctx context.Context, in *GameRequest, opts ...grpc.CallOption) (*Game, error) {
	out := new(Game)
	err := c.cc.Invoke(ctx, "/api.Hangman/ResumeGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hangmanClient) SaveGame(ctx context.Context, in *GameRequest, opts ...grpc.CallOption) (*Game, error) {
	out := new(Game)
	err := c.cc.Invoke(ctx, "/api.Hangman/SaveGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hangmanClient) GuessLetter(ctx context.Context, in *GuessRequest, opts ...grpc.CallOption) (*Game, error) {
	out := new(Game)
	err := c.cc.Invoke(ctx, "/api.Hangman/GuessLetter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HangmanServer is the server API for Hangman service.
type HangmanServer interface {
	NewGame(context.Context, *GameRequest) (*Game, error)
	ListGames(context.Context, *GameRequest) (*GameArray, error)
	ResumeGame(context.Context, *GameRequest) (*Game, error)
	SaveGame(context.Context, *GameRequest) (*Game, error)
	GuessLetter(context.Context, *GuessRequest) (*Game, error)
}

func RegisterHangmanServer(s *grpc.Server, srv HangmanServer) {
	s.RegisterService(&_Hangman_serviceDesc, srv)
}

func _Hangman_NewGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HangmanServer).NewGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Hangman/NewGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HangmanServer).NewGame(ctx, req.(*GameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hangman_ListGames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HangmanServer).ListGames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Hangman/ListGames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HangmanServer).ListGames(ctx, req.(*GameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hangman_ResumeGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HangmanServer).ResumeGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Hangman/ResumeGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HangmanServer).ResumeGame(ctx, req.(*GameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hangman_SaveGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HangmanServer).SaveGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Hangman/SaveGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HangmanServer).SaveGame(ctx, req.(*GameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hangman_GuessLetter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HangmanServer).GuessLetter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Hangman/GuessLetter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HangmanServer).GuessLetter(ctx, req.(*GuessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Hangman_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Hangman",
	HandlerType: (*HangmanServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewGame",
			Handler:    _Hangman_NewGame_Handler,
		},
		{
			MethodName: "ListGames",
			Handler:    _Hangman_ListGames_Handler,
		},
		{
			MethodName: "ResumeGame",
			Handler:    _Hangman_ResumeGame_Handler,
		},
		{
			MethodName: "SaveGame",
			Handler:    _Hangman_SaveGame_Handler,
		},
		{
			MethodName: "GuessLetter",
			Handler:    _Hangman_GuessLetter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
